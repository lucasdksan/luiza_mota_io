const e=require("fs"),s=require("chokidar"),r=require("sass"),i=require("postcss"),c=require("autoprefixer"),o=require("postcss-pxtorem"),{glob:n}=require("glob"),t=process.argv.slice(2);(({path_origin_dir:t,path_target_dir:a,ignore_dir:p})=>{const l=p.split("-").map((e=>"**/"+e+"/**/*.scss"));e.existsSync(a)&&e.rmSync(a,{force:!0,recursive:!0}),e.mkdirSync(a),s.watch(t+"/**/*.scss",{ignored:l}).on("all",(async(s,p)=>{console.log(s,p);const l=p.split("\\"),d=l[l.length-1],g=a+"/"+d;if("add"===s){const s=r.compile(p,{style:"compressed"});i([c,o]).process(s.css+"\n",{from:void 0}).then((s=>{e.appendFileSync(g.replace(".scss",".css"),s.css,(e=>{if(e)throw e}))}))}if("change"===s||"unlink"===s){const s=(await n(t+"/**/"+d)).map((e=>r.compile(e,{style:"compressed"}).css)).join("\n").replace("\ufeff","");i([c,o]).process(s,{from:void 0}).then((s=>{e.writeFileSync(g.replace(".scss",".css"),s.css,(e=>{if(e)throw e}))}))}}))})({path_origin_dir:t.find((e=>e.includes("origin"))).replace("--origin:",""),path_target_dir:t.find((e=>e.includes("target"))).replace("--target:",""),ignore_dir:t.find((e=>e.includes("ignore"))).replace("--ignore:","")});